{"version":3,"sources":["helpers.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["emitEvent","socket","eventName","a","args","Promise","resolve","emit","data","App","useState","isInRoom","setInRoom","isLoading","setLoading","lastError","setLastError","usernameInput","setUsernameInput","roomNameInput","setRoomNameInput","isAutoReady","setAutoReady","roomName","setRoomName","clipboard","membersState","roomState","setRoomState","clientUser","setClientUser","connection","setConnection","isInRoomRef","useRef","isLoadingRef","isAutoReadyRef","clientUserRef","connectionRef","current","onToggleReady","Error","result","status","failMessage","disconnect","htmlFor","type","name","value","onChange","e","target","disabled","onClick","username","trim","io","reconnection","reconnectionDelay","reconnectionAttempts","autoConnect","on","console","log","auth","reason","find","roomUser","isReady","sessionId","connect","map","style","width","height","checked","clipboardEntry","index","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.18267327.chunk.js","sourcesContent":["import { Socket } from \"socket.io-client\";\nimport { FailedResult } from \"./Interfaces/FailResult\";\nimport { SuccessResult } from \"./Interfaces/SuccessResult\";\n\nexport const emitEvent = async <T>(\n  socket: Socket,\n  eventName: string,\n  ...args: unknown[]\n): Promise<FailedResult | SuccessResult<T>> => {\n  return new Promise((resolve) => {\n    socket.emit(eventName, ...args, (data: FailedResult | SuccessResult<T>) => {\n      resolve(data);\n    });\n  });\n};\n","import React, { useRef, useState } from \"react\";\nimport { io, Socket } from \"socket.io-client\";\nimport \"./App.css\";\nimport { emitEvent } from \"./helpers\";\nimport { RoomState } from \"./Interfaces/RoomState\";\nimport { RoomUser } from \"./Interfaces/RoomUser\";\n\nexport const App = (): JSX.Element => {\n  const [isInRoom, setInRoom] = useState(false);\n  const [isLoading, setLoading] = useState(false);\n  const [lastError, setLastError] = useState(\"\");\n  const [usernameInput, setUsernameInput] = useState(\"\");\n  const [roomNameInput, setRoomNameInput] = useState(\"\");\n  const [isAutoReady, setAutoReady] = useState(false);\n\n  const [roomName, setRoomName] = useState(\"\");\n  const [roomState, setRoomState] = useState<RoomState>({\n    clipboard: [],\n    membersState: [],\n  });\n  const [clientUser, setClientUser] = useState<RoomUser | null>(null);\n  const [connection, setConnection] = useState<Socket | null>(null);\n\n  const isInRoomRef = useRef<boolean>();\n  const isLoadingRef = useRef<boolean>();\n  const isAutoReadyRef = useRef<boolean>();\n  const clientUserRef = useRef<RoomUser | null>();\n  const connectionRef = useRef<Socket | null>();\n  isInRoomRef.current = isInRoom;\n  isLoadingRef.current = isLoading;\n  isAutoReadyRef.current = isAutoReady;\n  clientUserRef.current = clientUser;\n  connectionRef.current = connection;\n\n  const onJoinRoom = () => {\n    setLoading(true);\n\n    const username = usernameInput.trim();\n    const roomName = roomNameInput.trim();\n    const connection = io(\"wss://vnsync-server-33vh3.ondigitalocean.app\", {\n      reconnection: true,\n      reconnectionDelay: 500,\n      reconnectionAttempts: 5,\n      autoConnect: false,\n    });\n\n    connection.io.on(\"reconnect_attempt\", () => {\n      console.log(connection.auth);\n      console.log(\"reconnect attempt\");\n    });\n\n    connection.io.on(\"reconnect_failed\", () => {\n      console.log(\"reconnect failed\");\n    });\n\n    connection.on(\"connect\", async () => {\n      console.log(\"connected\");\n\n      if (isInRoomRef.current) {\n        return;\n      }\n\n      const result = await emitEvent<string>(\n        connection,\n        \"joinRoom\",\n        username,\n        roomName\n      );\n\n      if (result.status !== \"ok\") {\n        setLastError(result.failMessage);\n        connection.disconnect();\n        return;\n      }\n\n      setInRoom(true);\n      setLoading(false);\n      setRoomName(roomName);\n      setLastError(\"\");\n    });\n\n    connection.on(\"disconnect\", (reason: string) => {\n      if (reason !== \"io server disconnect\") {\n        console.log(\"reconnecting...?\");\n\n        return;\n      }\n\n      setInRoom(false);\n      setLoading(false);\n      setRoomName(\"\");\n      setRoomState({\n        clipboard: [],\n        membersState: [],\n      });\n      setClientUser(null);\n      setConnection(null);\n    });\n\n    connection.on(\"roomStateChange\", (roomState: RoomState) => {\n      console.log(\"room state change\");\n\n      const clientUser =\n        roomState.membersState.find(\n          (roomUser) => roomUser.username === username\n        ) || null;\n\n      setRoomState(roomState);\n      setClientUser(clientUser);\n\n      if (\n        clientUser !== null &&\n        !clientUser.isReady &&\n        isAutoReadyRef.current &&\n        !isLoadingRef.current\n      ) {\n        onToggleReady();\n      }\n    });\n\n    connection.on(\"connect_error\", (reason) => {\n      console.log(reason);\n    });\n\n    connection.on(\"sessionId\", (sessionId: string) => {\n      console.log(sessionId);\n      connection.auth = {\n        sessionId,\n      };\n    });\n\n    connection.connect();\n\n    setConnection(connection);\n  };\n\n  const onToggleReady = async () => {\n    setLoading(true);\n\n    const connection = connectionRef.current;\n\n    if (!connection) {\n      throw new Error(\"Connection is not defined.\");\n    }\n\n    const result = await emitEvent<undefined>(connection, \"toggleReady\");\n\n    if (result.status !== \"ok\") {\n      setLastError(result.failMessage);\n      connection.disconnect();\n      return;\n    }\n\n    setLoading(false);\n  };\n\n  return (\n    <>\n      <h2>VNSync v0.9</h2>\n      {lastError !== \"\" && <h3>Error: {lastError}</h3>}\n      <div>\n        {!isInRoom && (\n          <>\n            <label htmlFor=\"username\">Username:</label>\n            &nbsp;\n            <input\n              type=\"text\"\n              name=\"username\"\n              value={usernameInput}\n              onChange={(e) => setUsernameInput(e.target.value)}\n              disabled={isLoading}\n            />\n            <br />\n            <label htmlFor=\"roomName\">Room name:</label>\n            &nbsp;\n            <input\n              type=\"text\"\n              name=\"roomName\"\n              value={roomNameInput}\n              onChange={(e) => setRoomNameInput(e.target.value)}\n              disabled={isLoading}\n            />\n            <br />\n            <button disabled={isLoading} onClick={onJoinRoom}>\n              Join Room!\n            </button>\n          </>\n        )}\n        {isInRoom && (\n          <>\n            <h3>Room name: {roomName}</h3>\n            <ul>\n              {roomState.membersState.map((roomUser) => (\n                <li key={roomUser.username}>\n                  {roomUser.username} - {!roomUser.isReady && \"not\"} ready\n                </li>\n              ))}\n            </ul>\n            <button\n              onClick={onToggleReady}\n              disabled={isLoading || isAutoReady}\n              style={{\n                width: \"100%\",\n                height: \"300px\",\n              }}\n            >\n              {clientUser?.isReady ? \"Unready\" : \"Ready\"}\n            </button>\n            <hr />\n            <label>Auto ready: </label>\n            <input\n              type=\"checkbox\"\n              checked={isAutoReady}\n              onChange={(e) => {\n                if (\n                  clientUserRef.current !== null &&\n                  !clientUserRef.current?.isReady &&\n                  !isAutoReadyRef.current\n                ) {\n                  onToggleReady();\n                }\n\n                setAutoReady(e.target.checked);\n              }}\n            />\n            <hr />\n            {roomState.clipboard.map((clipboardEntry, index) => (\n              <p>{clipboardEntry}</p>\n            ))}\n          </>\n        )}\n      </div>\n    </>\n  );\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}