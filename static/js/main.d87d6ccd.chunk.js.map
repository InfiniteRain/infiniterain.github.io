{"version":3,"sources":["helpers.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["emitEvent","socket","eventName","a","args","Promise","resolve","emit","data","App","useState","isInRoom","setInRoom","isLoading","setLoading","lastError","setLastError","usernameInput","setUsernameInput","roomNameInput","setRoomNameInput","roomName","setRoomName","roomState","setRoomState","clientUser","setClientUser","connection","setConnection","onToggleReady","Error","result","status","failMessage","disconnect","htmlFor","type","name","value","onChange","e","target","disabled","onClick","username","trim","io","reconnection","reconnectionDelay","reconnectionAttempts","on","reason","find","roomUser","map","isReady","style","width","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d87d6ccd.chunk.js","sourcesContent":["import { Socket } from \"socket.io-client\";\nimport { FailedResult } from \"./Interfaces/FailResult\";\nimport { SuccessResult } from \"./Interfaces/SuccessResult\";\n\nexport const emitEvent = async <T>(\n  socket: Socket,\n  eventName: string,\n  ...args: unknown[]\n): Promise<FailedResult | SuccessResult<T>> => {\n  return new Promise((resolve) => {\n    socket.emit(eventName, ...args, (data: FailedResult | SuccessResult<T>) => {\n      resolve(data);\n    });\n  });\n};\n","import React, { useState } from \"react\";\nimport { io, Socket } from \"socket.io-client\";\nimport \"./App.css\";\nimport { emitEvent } from \"./helpers\";\nimport { RoomUser } from \"./Interfaces/RoomUser\";\n\nexport const App = (): JSX.Element => {\n  const [isInRoom, setInRoom] = useState(false);\n  const [isLoading, setLoading] = useState(false);\n  const [lastError, setLastError] = useState(\"\");\n  const [usernameInput, setUsernameInput] = useState(\"\");\n  const [roomNameInput, setRoomNameInput] = useState(\"\");\n\n  const [roomName, setRoomName] = useState(\"\");\n  const [roomState, setRoomState] = useState<RoomUser[]>([]);\n  const [clientUser, setClientUser] = useState<RoomUser | null>(null);\n  const [connection, setConnection] = useState<Socket | null>(null);\n\n  const onJoinRoom = () => {\n    setLoading(true);\n\n    const username = usernameInput.trim();\n    const roomName = roomNameInput.trim();\n    const connection = io(\"wss://vnsync-server-33vh3.ondigitalocean.app\", {\n      reconnection: true,\n      reconnectionDelay: 500,\n      reconnectionAttempts: 120,\n    });\n\n    connection.on(\"connect\", async () => {\n      const result = await emitEvent<string>(\n        connection,\n        \"joinRoom\",\n        username,\n        roomName\n      );\n\n      if (result.status !== \"ok\") {\n        setLastError(result.failMessage);\n        connection.disconnect();\n        return;\n      }\n\n      setInRoom(true);\n      setLoading(false);\n      setRoomName(roomName);\n      setLastError(\"\");\n    });\n\n    connection.on(\"disconnect\", (reason: string) => {\n      if (reason !== \"io server disconnect\") {\n        return;\n      }\n\n      setInRoom(false);\n      setLoading(false);\n      setRoomName(\"\");\n      setRoomState([]);\n      setClientUser(null);\n      setConnection(null);\n    });\n\n    connection.on(\"roomStateChange\", (roomState: RoomUser[]) => {\n      setRoomState(roomState);\n      setClientUser(\n        roomState.find((roomUser) => roomUser.username === username) || null\n      );\n    });\n\n    setConnection(connection);\n  };\n\n  const onToggleReady = async () => {\n    setLoading(true);\n\n    if (!connection) {\n      throw new Error(\"Connection is now defined.\");\n    }\n\n    const result = await emitEvent<undefined>(connection, \"toggleReady\");\n\n    if (result.status !== \"ok\") {\n      setLastError(result.failMessage);\n      connection.disconnect();\n      return;\n    }\n\n    setLoading(false);\n  };\n\n  return (\n    <>\n      <h2>VNSync 0.3</h2>\n      {lastError !== \"\" && <h3>Error: {lastError}</h3>}\n      <div>\n        {!isInRoom && (\n          <>\n            <label htmlFor=\"username\">Username:</label>\n            &nbsp;\n            <input\n              type=\"text\"\n              name=\"username\"\n              value={usernameInput}\n              onChange={(e) => setUsernameInput(e.target.value)}\n              disabled={isLoading}\n            />\n            <br />\n            <label htmlFor=\"roomName\">Room name:</label>\n            &nbsp;\n            <input\n              type=\"text\"\n              name=\"roomName\"\n              value={roomNameInput}\n              onChange={(e) => setRoomNameInput(e.target.value)}\n              disabled={isLoading}\n            />\n            <br />\n            <button disabled={isLoading} onClick={onJoinRoom}>\n              Join Room!\n            </button>\n          </>\n        )}\n        {isInRoom && (\n          <>\n            <h3>Room name: {roomName}</h3>\n            <ul>\n              {roomState.map((roomUser) => (\n                <li key={roomUser.username}>\n                  {roomUser.username} - {!roomUser.isReady && \"not\"} ready\n                </li>\n              ))}\n            </ul>\n            <button\n              onClick={onToggleReady}\n              disabled={isLoading}\n              style={{\n                width: \"100%\",\n                height: \"500px\",\n              }}\n            >\n              {clientUser?.isReady ? \"Unready\" : \"Ready\"}\n            </button>\n            <hr />\n          </>\n        )}\n      </div>\n    </>\n  );\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}